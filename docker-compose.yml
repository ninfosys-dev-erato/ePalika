services:
  ### OPENFGA SETUP ###
  openfga_postgres:
    image: postgres:17
    container_name: openfga_postgres
    networks:
      - authnz
    ports:
      - "5656:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  openfga_migrate:
    depends_on:
      openfga_postgres:
        condition: service_healthy
    image: openfga/openfga:v1.10.2
    container_name: openfga_migrate
    command: migrate
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:password@openfga_postgres:5432/postgres?sslmode=disable
    networks:
      - authnz

  openfga:
    depends_on:
      openfga_migrate:
        condition: service_completed_successfully
    image: openfga/openfga:latest
    container_name: openfga
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:password@openfga_postgres:5432/postgres?sslmode=disable
      - OPENFGA_LOG_FORMAT=json
    command: run
    networks:
      - authnz
    ports:
      - "8081:8080" # HTTP GATEWAY
      - "8082:8081" # GRPC GATEWAY
      - "6969:3000" # PLAYGROUND

  ### PDP SETUP ###
  pdp:
    build:
      context: .
      dockerfile: services/pdp/cmd/pdpsvc/Dockerfile
    environment:
      FGA_CHECK_URL: "http://openfga:8080/stores/${FGA_STORE}/check"
      FGA_MODEL_ID: "${FGA_MODEL_ID}"
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/healthz"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      - openfga
    networks:
      - authnz

  darta-chalani:
    build:
      context: .
      dockerfile: services/darta-chalani/cmd/dartasvc/Dockerfile
    ports:
      - "9000:9000"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9000/health"]
      interval: 5s
      timeout: 3s
      retries: 10

  oathkeeper:
    image: oryd/oathkeeper:latest
    command: ["serve", "--config", "/etc/config/oathkeeper.yaml"]
    ports:
      - "4455:4455"
      - "4456:4456"
    volumes:
      - ./policies/oathkeeper/config.yaml:/etc/config/oathkeeper.yaml:ro
      - ./policies/oathkeeper/base:/rules:ro
    healthcheck:
      test:
        ["CMD", "wget", "-q", "--spider", "http://localhost:4456/health/alive"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      - keycloak
      - pdp
    networks:
      - authnz

  #### KEYCLOAK SETUP ####
  keycloak_db:
    image: postgres:17
    container_name: keycloak_db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - authnz
  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    command: ["start-dev"]
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: "true"
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak_db
      KC_DB_URL_PORT: 5432
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
    depends_on:
      keycloak_db:
        condition: service_healthy
    networks:
      - authnz
    ports:
      - "8083:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 12

networks:
  authnz:
    driver: bridge
