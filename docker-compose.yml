services:
  ### OPENFGA SETUP ###
  openfga_postgres:
    image: postgres:17
    container_name: openfga_postgres
    networks:
      - authnz
    ports:
      - "5656:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  openfga_migrate:
    depends_on:
      openfga_postgres:
        condition: service_healthy
    image: openfga/openfga:v1.10.2
    container_name: openfga_migrate
    command: migrate
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:password@openfga_postgres:5432/postgres?sslmode=disable
    networks:
      - authnz

  openfga:
    depends_on:
      openfga_migrate:
        condition: service_completed_successfully
    image: openfga/openfga:latest
    container_name: openfga
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:password@openfga_postgres:5432/postgres?sslmode=disable
      - OPENFGA_LOG_FORMAT=json
    command: run
    networks:
      - authnz
    ports:
      - "8081:8080" # HTTP GATEWAY
      - "8082:8081" # GRPC GATEWAY
      - "6969:3000" # PLAYGROUND

  ### PDP SETUP ###
  pdp:
    build:
      context: .
      dockerfile: services/pdp/cmd/pdpsvc/Dockerfile
    environment:
      FGA_CHECK_URL: "http://openfga:8080/stores/${FGA_STORE}/check"
      FGA_MODEL_ID: "${FGA_MODEL_ID}"
      PDP_GRPC_PORT: "9100"
      PDP_HTTP_PORT: "8080"
    ports:
      - "8080:8080"
      - "9100:9100"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/healthz"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      - openfga
    networks:
      - authnz

  darta-chalani:
    build:
      context: .
      dockerfile: services/darta-chalani/cmd/dartasvc/Dockerfile
    ports:
      - "9000:9000"
    environment:
      - DARTA_DB_DSN=postgres://yugabyte:yugabyte@yugabytedb:5433/epalika?sslmode=disable
      - DARTA_DB_MAX_CONNS=15
      - DARTA_DB_MIN_CONNS=3
      - DARTA_DB_MIGRATE_TIMEOUT=60s
      - DARTA_DB_HEALTH_TIMEOUT=3s
      - DEFAULT_TENANT=default
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9000/health"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      yugabytedb:
        condition: service_healthy
      yugabytedb-init:
        condition: service_completed_successfully
    networks:
      - authnz

  identity:
    build:
      context: .
      dockerfile: services/identity/Dockerfile
    ports:
      - "9001:9001"
    environment:
      - PORT=9001
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=master
      - KEYCLOAK_CLIENT_ID=admin-cli
      - KEYCLOAK_CLIENT_SECRET=admin
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9001/health"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      keycloak:
        condition: service_healthy
    networks:
      - authnz

  graphql-gateway:
    build:
      context: .
      dockerfile: services/graphql-gateway/cmd/gateways/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DARTA_CHALANI_GRPC_ADDR=darta-chalani:9000
      - IDENTITY_GRPC_ADDR=identity:9001
      - PDP_GRPC_ADDR=pdp:9100
      - PORT=8000
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8000/health"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      - darta-chalani
      - identity
      - pdp
    networks:
      - authnz

  oathkeeper:
    image: oryd/oathkeeper:latest
    command: ["serve", "--config", "/etc/config/oathkeeper.yaml"]
    ports:
      - "4455:4455"
      - "4456:4456"
    volumes:
      - ./policies/oathkeeper/config.yaml:/etc/config/oathkeeper.yaml:ro
      - ./policies/oathkeeper/base:/rules:ro
    healthcheck:
      test:
        ["CMD", "wget", "-q", "--spider", "http://localhost:4456/health/alive"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      - keycloak
      - pdp
    networks:
      - authnz

  #### KEYCLOAK SETUP ####
  keycloak_db:
    image: postgres:17
    container_name: keycloak_db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - authnz
  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    command: ["start-dev"]
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: "true"
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak_db
      KC_DB_URL_PORT: 5432
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
    depends_on:
      keycloak_db:
        condition: service_healthy
    networks:
      - authnz
    ports:
      - "8083:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 12

### YUGABYTE SETUP ###
  yugabytedb:
    image: yugabytedb/yugabyte:latest
    container_name: yugabytedb
    hostname: yugabytedb
    ports:
      - "7000:7000" # Admin UI
      - "5433:5433" # YSQL
      - "9042:9042" # YCQL
    command: ["bash", "-c", "/home/yugabyte/bin/yugabyted start --base_dir=/var/lib/yugabytedb --daemon=false"]
    volumes:
      - yugabytedb-data:/var/lib/yugabytedb
    environment:
      - YB_ENABLE_LOAD_BALANCER=false
    healthcheck:
      test: ["CMD", "ysqlsh", "-h", "yugabytedb", "-c", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - authnz
  yugabytedb-init:
    image: yugabytedb/yugabyte:latest
    depends_on:
      yugabytedb:
        condition: service_healthy
    command: >
      bash -c "
        for i in {1..30}; do
          ysqlsh -h yugabytedb -c 'SELECT 1' >/dev/null 2>&1 && break
          sleep 2
        done
        ysqlsh -h yugabytedb -c \"CREATE DATABASE epalika\" >/dev/null 2>&1 || true
      "
    networks:
      - authnz

  broker:
    image: apache/kafka:latest
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3

volumes:
  yugabytedb-data:

networks:
  authnz:
    driver: bridge
