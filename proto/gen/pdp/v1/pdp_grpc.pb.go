// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pdp/v1/pdp.proto

package pdpv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PolicyDecisionService_HealthCheck_FullMethodName        = "/pdp.v1.PolicyDecisionService/HealthCheck"
	PolicyDecisionService_CheckAuthorization_FullMethodName = "/pdp.v1.PolicyDecisionService/CheckAuthorization"
)

// PolicyDecisionServiceClient is the client API for PolicyDecisionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyDecisionServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	CheckAuthorization(ctx context.Context, in *CheckAuthorizationRequest, opts ...grpc.CallOption) (*CheckAuthorizationResponse, error)
}

type policyDecisionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyDecisionServiceClient(cc grpc.ClientConnInterface) PolicyDecisionServiceClient {
	return &policyDecisionServiceClient{cc}
}

func (c *policyDecisionServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, PolicyDecisionService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyDecisionServiceClient) CheckAuthorization(ctx context.Context, in *CheckAuthorizationRequest, opts ...grpc.CallOption) (*CheckAuthorizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAuthorizationResponse)
	err := c.cc.Invoke(ctx, PolicyDecisionService_CheckAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyDecisionServiceServer is the server API for PolicyDecisionService service.
// All implementations must embed UnimplementedPolicyDecisionServiceServer
// for forward compatibility.
type PolicyDecisionServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	CheckAuthorization(context.Context, *CheckAuthorizationRequest) (*CheckAuthorizationResponse, error)
	mustEmbedUnimplementedPolicyDecisionServiceServer()
}

// UnimplementedPolicyDecisionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPolicyDecisionServiceServer struct{}

func (UnimplementedPolicyDecisionServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedPolicyDecisionServiceServer) CheckAuthorization(context.Context, *CheckAuthorizationRequest) (*CheckAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuthorization not implemented")
}
func (UnimplementedPolicyDecisionServiceServer) mustEmbedUnimplementedPolicyDecisionServiceServer() {}
func (UnimplementedPolicyDecisionServiceServer) testEmbeddedByValue()                               {}

// UnsafePolicyDecisionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyDecisionServiceServer will
// result in compilation errors.
type UnsafePolicyDecisionServiceServer interface {
	mustEmbedUnimplementedPolicyDecisionServiceServer()
}

func RegisterPolicyDecisionServiceServer(s grpc.ServiceRegistrar, srv PolicyDecisionServiceServer) {
	// If the following call pancis, it indicates UnimplementedPolicyDecisionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PolicyDecisionService_ServiceDesc, srv)
}

func _PolicyDecisionService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyDecisionServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyDecisionService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyDecisionServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyDecisionService_CheckAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyDecisionServiceServer).CheckAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyDecisionService_CheckAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyDecisionServiceServer).CheckAuthorization(ctx, req.(*CheckAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyDecisionService_ServiceDesc is the grpc.ServiceDesc for PolicyDecisionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyDecisionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdp.v1.PolicyDecisionService",
	HandlerType: (*PolicyDecisionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _PolicyDecisionService_HealthCheck_Handler,
		},
		{
			MethodName: "CheckAuthorization",
			Handler:    _PolicyDecisionService_CheckAuthorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pdp/v1/pdp.proto",
}
