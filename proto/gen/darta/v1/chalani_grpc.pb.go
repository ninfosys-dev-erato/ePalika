// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: darta/v1/chalani.proto

package dartav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChalaniService_GetChalani_FullMethodName                     = "/darta.v1.ChalaniService/GetChalani"
	ChalaniService_GetChalaniByNumber_FullMethodName             = "/darta.v1.ChalaniService/GetChalaniByNumber"
	ChalaniService_ListChalanis_FullMethodName                   = "/darta.v1.ChalaniService/ListChalanis"
	ChalaniService_GetMyChalani_FullMethodName                   = "/darta.v1.ChalaniService/GetMyChalani"
	ChalaniService_GetChalaniStats_FullMethodName                = "/darta.v1.ChalaniService/GetChalaniStats"
	ChalaniService_ListChalaniTemplates_FullMethodName           = "/darta.v1.ChalaniService/ListChalaniTemplates"
	ChalaniService_GetChalaniTemplate_FullMethodName             = "/darta.v1.ChalaniService/GetChalaniTemplate"
	ChalaniService_CreateChalani_FullMethodName                  = "/darta.v1.ChalaniService/CreateChalani"
	ChalaniService_SubmitChalani_FullMethodName                  = "/darta.v1.ChalaniService/SubmitChalani"
	ChalaniService_ReviewChalani_FullMethodName                  = "/darta.v1.ChalaniService/ReviewChalani"
	ChalaniService_ApproveChalani_FullMethodName                 = "/darta.v1.ChalaniService/ApproveChalani"
	ChalaniService_ReserveChalaniNumber_FullMethodName           = "/darta.v1.ChalaniService/ReserveChalaniNumber"
	ChalaniService_FinalizeChalaniRegistration_FullMethodName    = "/darta.v1.ChalaniService/FinalizeChalaniRegistration"
	ChalaniService_DirectRegisterChalani_FullMethodName          = "/darta.v1.ChalaniService/DirectRegisterChalani"
	ChalaniService_SignChalani_FullMethodName                    = "/darta.v1.ChalaniService/SignChalani"
	ChalaniService_SealChalani_FullMethodName                    = "/darta.v1.ChalaniService/SealChalani"
	ChalaniService_DispatchChalani_FullMethodName                = "/darta.v1.ChalaniService/DispatchChalani"
	ChalaniService_MarkChalaniInTransit_FullMethodName           = "/darta.v1.ChalaniService/MarkChalaniInTransit"
	ChalaniService_AcknowledgeChalani_FullMethodName             = "/darta.v1.ChalaniService/AcknowledgeChalani"
	ChalaniService_MarkChalaniDelivered_FullMethodName           = "/darta.v1.ChalaniService/MarkChalaniDelivered"
	ChalaniService_MarkChalaniReturnedUndelivered_FullMethodName = "/darta.v1.ChalaniService/MarkChalaniReturnedUndelivered"
	ChalaniService_ResendChalani_FullMethodName                  = "/darta.v1.ChalaniService/ResendChalani"
	ChalaniService_VoidChalani_FullMethodName                    = "/darta.v1.ChalaniService/VoidChalani"
	ChalaniService_SupersedeChalani_FullMethodName               = "/darta.v1.ChalaniService/SupersedeChalani"
	ChalaniService_CloseChalani_FullMethodName                   = "/darta.v1.ChalaniService/CloseChalani"
	ChalaniService_HealthCheck_FullMethodName                    = "/darta.v1.ChalaniService/HealthCheck"
)

// ChalaniServiceClient is the client API for ChalaniService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChalaniServiceClient interface {
	// Query operations
	GetChalani(ctx context.Context, in *GetChalaniRequest, opts ...grpc.CallOption) (*GetChalaniResponse, error)
	GetChalaniByNumber(ctx context.Context, in *GetChalaniByNumberRequest, opts ...grpc.CallOption) (*GetChalaniByNumberResponse, error)
	ListChalanis(ctx context.Context, in *ListChalanisRequest, opts ...grpc.CallOption) (*ListChalanisResponse, error)
	GetMyChalani(ctx context.Context, in *GetMyChalaniRequest, opts ...grpc.CallOption) (*GetMyChalaniResponse, error)
	GetChalaniStats(ctx context.Context, in *GetChalaniStatsRequest, opts ...grpc.CallOption) (*GetChalaniStatsResponse, error)
	ListChalaniTemplates(ctx context.Context, in *ListChalaniTemplatesRequest, opts ...grpc.CallOption) (*ListChalaniTemplatesResponse, error)
	GetChalaniTemplate(ctx context.Context, in *GetChalaniTemplateRequest, opts ...grpc.CallOption) (*GetChalaniTemplateResponse, error)
	// Mutation operations - Creation and Review
	CreateChalani(ctx context.Context, in *CreateChalaniRequest, opts ...grpc.CallOption) (*CreateChalaniResponse, error)
	SubmitChalani(ctx context.Context, in *SubmitChalaniRequest, opts ...grpc.CallOption) (*SubmitChalaniResponse, error)
	ReviewChalani(ctx context.Context, in *ReviewChalaniRequest, opts ...grpc.CallOption) (*ReviewChalaniResponse, error)
	ApproveChalani(ctx context.Context, in *ApproveChalaniRequest, opts ...grpc.CallOption) (*ApproveChalaniResponse, error)
	// Mutation operations - Registration
	ReserveChalaniNumber(ctx context.Context, in *ReserveChalaniNumberRequest, opts ...grpc.CallOption) (*ReserveChalaniNumberResponse, error)
	FinalizeChalaniRegistration(ctx context.Context, in *FinalizeChalaniRegistrationRequest, opts ...grpc.CallOption) (*FinalizeChalaniRegistrationResponse, error)
	DirectRegisterChalani(ctx context.Context, in *DirectRegisterChalaniRequest, opts ...grpc.CallOption) (*DirectRegisterChalaniResponse, error)
	// Mutation operations - Signing and Sealing
	SignChalani(ctx context.Context, in *SignChalaniRequest, opts ...grpc.CallOption) (*SignChalaniResponse, error)
	SealChalani(ctx context.Context, in *SealChalaniRequest, opts ...grpc.CallOption) (*SealChalaniResponse, error)
	// Mutation operations - Dispatch and Delivery
	DispatchChalani(ctx context.Context, in *DispatchChalaniRequest, opts ...grpc.CallOption) (*DispatchChalaniResponse, error)
	MarkChalaniInTransit(ctx context.Context, in *MarkChalaniInTransitRequest, opts ...grpc.CallOption) (*MarkChalaniInTransitResponse, error)
	AcknowledgeChalani(ctx context.Context, in *AcknowledgeChalaniRequest, opts ...grpc.CallOption) (*AcknowledgeChalaniResponse, error)
	MarkChalaniDelivered(ctx context.Context, in *MarkChalaniDeliveredRequest, opts ...grpc.CallOption) (*MarkChalaniDeliveredResponse, error)
	MarkChalaniReturnedUndelivered(ctx context.Context, in *MarkChalaniReturnedUndeliveredRequest, opts ...grpc.CallOption) (*MarkChalaniReturnedUndeliveredResponse, error)
	// Mutation operations - Lifecycle management
	ResendChalani(ctx context.Context, in *ResendChalaniRequest, opts ...grpc.CallOption) (*ResendChalaniResponse, error)
	VoidChalani(ctx context.Context, in *VoidChalaniRequest, opts ...grpc.CallOption) (*VoidChalaniResponse, error)
	SupersedeChalani(ctx context.Context, in *SupersedeChalaniRequest, opts ...grpc.CallOption) (*SupersedeChalaniResponse, error)
	CloseChalani(ctx context.Context, in *CloseChalaniRequest, opts ...grpc.CallOption) (*CloseChalaniResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type chalaniServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChalaniServiceClient(cc grpc.ClientConnInterface) ChalaniServiceClient {
	return &chalaniServiceClient{cc}
}

func (c *chalaniServiceClient) GetChalani(ctx context.Context, in *GetChalaniRequest, opts ...grpc.CallOption) (*GetChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_GetChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) GetChalaniByNumber(ctx context.Context, in *GetChalaniByNumberRequest, opts ...grpc.CallOption) (*GetChalaniByNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChalaniByNumberResponse)
	err := c.cc.Invoke(ctx, ChalaniService_GetChalaniByNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) ListChalanis(ctx context.Context, in *ListChalanisRequest, opts ...grpc.CallOption) (*ListChalanisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChalanisResponse)
	err := c.cc.Invoke(ctx, ChalaniService_ListChalanis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) GetMyChalani(ctx context.Context, in *GetMyChalaniRequest, opts ...grpc.CallOption) (*GetMyChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_GetMyChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) GetChalaniStats(ctx context.Context, in *GetChalaniStatsRequest, opts ...grpc.CallOption) (*GetChalaniStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChalaniStatsResponse)
	err := c.cc.Invoke(ctx, ChalaniService_GetChalaniStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) ListChalaniTemplates(ctx context.Context, in *ListChalaniTemplatesRequest, opts ...grpc.CallOption) (*ListChalaniTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChalaniTemplatesResponse)
	err := c.cc.Invoke(ctx, ChalaniService_ListChalaniTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) GetChalaniTemplate(ctx context.Context, in *GetChalaniTemplateRequest, opts ...grpc.CallOption) (*GetChalaniTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChalaniTemplateResponse)
	err := c.cc.Invoke(ctx, ChalaniService_GetChalaniTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) CreateChalani(ctx context.Context, in *CreateChalaniRequest, opts ...grpc.CallOption) (*CreateChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_CreateChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) SubmitChalani(ctx context.Context, in *SubmitChalaniRequest, opts ...grpc.CallOption) (*SubmitChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_SubmitChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) ReviewChalani(ctx context.Context, in *ReviewChalaniRequest, opts ...grpc.CallOption) (*ReviewChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_ReviewChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) ApproveChalani(ctx context.Context, in *ApproveChalaniRequest, opts ...grpc.CallOption) (*ApproveChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_ApproveChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) ReserveChalaniNumber(ctx context.Context, in *ReserveChalaniNumberRequest, opts ...grpc.CallOption) (*ReserveChalaniNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveChalaniNumberResponse)
	err := c.cc.Invoke(ctx, ChalaniService_ReserveChalaniNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) FinalizeChalaniRegistration(ctx context.Context, in *FinalizeChalaniRegistrationRequest, opts ...grpc.CallOption) (*FinalizeChalaniRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinalizeChalaniRegistrationResponse)
	err := c.cc.Invoke(ctx, ChalaniService_FinalizeChalaniRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) DirectRegisterChalani(ctx context.Context, in *DirectRegisterChalaniRequest, opts ...grpc.CallOption) (*DirectRegisterChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DirectRegisterChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_DirectRegisterChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) SignChalani(ctx context.Context, in *SignChalaniRequest, opts ...grpc.CallOption) (*SignChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_SignChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) SealChalani(ctx context.Context, in *SealChalaniRequest, opts ...grpc.CallOption) (*SealChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SealChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_SealChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) DispatchChalani(ctx context.Context, in *DispatchChalaniRequest, opts ...grpc.CallOption) (*DispatchChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DispatchChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_DispatchChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) MarkChalaniInTransit(ctx context.Context, in *MarkChalaniInTransitRequest, opts ...grpc.CallOption) (*MarkChalaniInTransitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkChalaniInTransitResponse)
	err := c.cc.Invoke(ctx, ChalaniService_MarkChalaniInTransit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) AcknowledgeChalani(ctx context.Context, in *AcknowledgeChalaniRequest, opts ...grpc.CallOption) (*AcknowledgeChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgeChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_AcknowledgeChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) MarkChalaniDelivered(ctx context.Context, in *MarkChalaniDeliveredRequest, opts ...grpc.CallOption) (*MarkChalaniDeliveredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkChalaniDeliveredResponse)
	err := c.cc.Invoke(ctx, ChalaniService_MarkChalaniDelivered_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) MarkChalaniReturnedUndelivered(ctx context.Context, in *MarkChalaniReturnedUndeliveredRequest, opts ...grpc.CallOption) (*MarkChalaniReturnedUndeliveredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkChalaniReturnedUndeliveredResponse)
	err := c.cc.Invoke(ctx, ChalaniService_MarkChalaniReturnedUndelivered_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) ResendChalani(ctx context.Context, in *ResendChalaniRequest, opts ...grpc.CallOption) (*ResendChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResendChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_ResendChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) VoidChalani(ctx context.Context, in *VoidChalaniRequest, opts ...grpc.CallOption) (*VoidChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoidChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_VoidChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) SupersedeChalani(ctx context.Context, in *SupersedeChalaniRequest, opts ...grpc.CallOption) (*SupersedeChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupersedeChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_SupersedeChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) CloseChalani(ctx context.Context, in *CloseChalaniRequest, opts ...grpc.CallOption) (*CloseChalaniResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseChalaniResponse)
	err := c.cc.Invoke(ctx, ChalaniService_CloseChalani_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chalaniServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ChalaniService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChalaniServiceServer is the server API for ChalaniService service.
// All implementations must embed UnimplementedChalaniServiceServer
// for forward compatibility.
type ChalaniServiceServer interface {
	// Query operations
	GetChalani(context.Context, *GetChalaniRequest) (*GetChalaniResponse, error)
	GetChalaniByNumber(context.Context, *GetChalaniByNumberRequest) (*GetChalaniByNumberResponse, error)
	ListChalanis(context.Context, *ListChalanisRequest) (*ListChalanisResponse, error)
	GetMyChalani(context.Context, *GetMyChalaniRequest) (*GetMyChalaniResponse, error)
	GetChalaniStats(context.Context, *GetChalaniStatsRequest) (*GetChalaniStatsResponse, error)
	ListChalaniTemplates(context.Context, *ListChalaniTemplatesRequest) (*ListChalaniTemplatesResponse, error)
	GetChalaniTemplate(context.Context, *GetChalaniTemplateRequest) (*GetChalaniTemplateResponse, error)
	// Mutation operations - Creation and Review
	CreateChalani(context.Context, *CreateChalaniRequest) (*CreateChalaniResponse, error)
	SubmitChalani(context.Context, *SubmitChalaniRequest) (*SubmitChalaniResponse, error)
	ReviewChalani(context.Context, *ReviewChalaniRequest) (*ReviewChalaniResponse, error)
	ApproveChalani(context.Context, *ApproveChalaniRequest) (*ApproveChalaniResponse, error)
	// Mutation operations - Registration
	ReserveChalaniNumber(context.Context, *ReserveChalaniNumberRequest) (*ReserveChalaniNumberResponse, error)
	FinalizeChalaniRegistration(context.Context, *FinalizeChalaniRegistrationRequest) (*FinalizeChalaniRegistrationResponse, error)
	DirectRegisterChalani(context.Context, *DirectRegisterChalaniRequest) (*DirectRegisterChalaniResponse, error)
	// Mutation operations - Signing and Sealing
	SignChalani(context.Context, *SignChalaniRequest) (*SignChalaniResponse, error)
	SealChalani(context.Context, *SealChalaniRequest) (*SealChalaniResponse, error)
	// Mutation operations - Dispatch and Delivery
	DispatchChalani(context.Context, *DispatchChalaniRequest) (*DispatchChalaniResponse, error)
	MarkChalaniInTransit(context.Context, *MarkChalaniInTransitRequest) (*MarkChalaniInTransitResponse, error)
	AcknowledgeChalani(context.Context, *AcknowledgeChalaniRequest) (*AcknowledgeChalaniResponse, error)
	MarkChalaniDelivered(context.Context, *MarkChalaniDeliveredRequest) (*MarkChalaniDeliveredResponse, error)
	MarkChalaniReturnedUndelivered(context.Context, *MarkChalaniReturnedUndeliveredRequest) (*MarkChalaniReturnedUndeliveredResponse, error)
	// Mutation operations - Lifecycle management
	ResendChalani(context.Context, *ResendChalaniRequest) (*ResendChalaniResponse, error)
	VoidChalani(context.Context, *VoidChalaniRequest) (*VoidChalaniResponse, error)
	SupersedeChalani(context.Context, *SupersedeChalaniRequest) (*SupersedeChalaniResponse, error)
	CloseChalani(context.Context, *CloseChalaniRequest) (*CloseChalaniResponse, error)
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedChalaniServiceServer()
}

// UnimplementedChalaniServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChalaniServiceServer struct{}

func (UnimplementedChalaniServiceServer) GetChalani(context.Context, *GetChalaniRequest) (*GetChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChalani not implemented")
}
func (UnimplementedChalaniServiceServer) GetChalaniByNumber(context.Context, *GetChalaniByNumberRequest) (*GetChalaniByNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChalaniByNumber not implemented")
}
func (UnimplementedChalaniServiceServer) ListChalanis(context.Context, *ListChalanisRequest) (*ListChalanisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChalanis not implemented")
}
func (UnimplementedChalaniServiceServer) GetMyChalani(context.Context, *GetMyChalaniRequest) (*GetMyChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyChalani not implemented")
}
func (UnimplementedChalaniServiceServer) GetChalaniStats(context.Context, *GetChalaniStatsRequest) (*GetChalaniStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChalaniStats not implemented")
}
func (UnimplementedChalaniServiceServer) ListChalaniTemplates(context.Context, *ListChalaniTemplatesRequest) (*ListChalaniTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChalaniTemplates not implemented")
}
func (UnimplementedChalaniServiceServer) GetChalaniTemplate(context.Context, *GetChalaniTemplateRequest) (*GetChalaniTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChalaniTemplate not implemented")
}
func (UnimplementedChalaniServiceServer) CreateChalani(context.Context, *CreateChalaniRequest) (*CreateChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChalani not implemented")
}
func (UnimplementedChalaniServiceServer) SubmitChalani(context.Context, *SubmitChalaniRequest) (*SubmitChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitChalani not implemented")
}
func (UnimplementedChalaniServiceServer) ReviewChalani(context.Context, *ReviewChalaniRequest) (*ReviewChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewChalani not implemented")
}
func (UnimplementedChalaniServiceServer) ApproveChalani(context.Context, *ApproveChalaniRequest) (*ApproveChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveChalani not implemented")
}
func (UnimplementedChalaniServiceServer) ReserveChalaniNumber(context.Context, *ReserveChalaniNumberRequest) (*ReserveChalaniNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveChalaniNumber not implemented")
}
func (UnimplementedChalaniServiceServer) FinalizeChalaniRegistration(context.Context, *FinalizeChalaniRegistrationRequest) (*FinalizeChalaniRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeChalaniRegistration not implemented")
}
func (UnimplementedChalaniServiceServer) DirectRegisterChalani(context.Context, *DirectRegisterChalaniRequest) (*DirectRegisterChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectRegisterChalani not implemented")
}
func (UnimplementedChalaniServiceServer) SignChalani(context.Context, *SignChalaniRequest) (*SignChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignChalani not implemented")
}
func (UnimplementedChalaniServiceServer) SealChalani(context.Context, *SealChalaniRequest) (*SealChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SealChalani not implemented")
}
func (UnimplementedChalaniServiceServer) DispatchChalani(context.Context, *DispatchChalaniRequest) (*DispatchChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchChalani not implemented")
}
func (UnimplementedChalaniServiceServer) MarkChalaniInTransit(context.Context, *MarkChalaniInTransitRequest) (*MarkChalaniInTransitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkChalaniInTransit not implemented")
}
func (UnimplementedChalaniServiceServer) AcknowledgeChalani(context.Context, *AcknowledgeChalaniRequest) (*AcknowledgeChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeChalani not implemented")
}
func (UnimplementedChalaniServiceServer) MarkChalaniDelivered(context.Context, *MarkChalaniDeliveredRequest) (*MarkChalaniDeliveredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkChalaniDelivered not implemented")
}
func (UnimplementedChalaniServiceServer) MarkChalaniReturnedUndelivered(context.Context, *MarkChalaniReturnedUndeliveredRequest) (*MarkChalaniReturnedUndeliveredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkChalaniReturnedUndelivered not implemented")
}
func (UnimplementedChalaniServiceServer) ResendChalani(context.Context, *ResendChalaniRequest) (*ResendChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendChalani not implemented")
}
func (UnimplementedChalaniServiceServer) VoidChalani(context.Context, *VoidChalaniRequest) (*VoidChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoidChalani not implemented")
}
func (UnimplementedChalaniServiceServer) SupersedeChalani(context.Context, *SupersedeChalaniRequest) (*SupersedeChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupersedeChalani not implemented")
}
func (UnimplementedChalaniServiceServer) CloseChalani(context.Context, *CloseChalaniRequest) (*CloseChalaniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChalani not implemented")
}
func (UnimplementedChalaniServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedChalaniServiceServer) mustEmbedUnimplementedChalaniServiceServer() {}
func (UnimplementedChalaniServiceServer) testEmbeddedByValue()                        {}

// UnsafeChalaniServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChalaniServiceServer will
// result in compilation errors.
type UnsafeChalaniServiceServer interface {
	mustEmbedUnimplementedChalaniServiceServer()
}

func RegisterChalaniServiceServer(s grpc.ServiceRegistrar, srv ChalaniServiceServer) {
	// If the following call pancis, it indicates UnimplementedChalaniServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChalaniService_ServiceDesc, srv)
}

func _ChalaniService_GetChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).GetChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_GetChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).GetChalani(ctx, req.(*GetChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_GetChalaniByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChalaniByNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).GetChalaniByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_GetChalaniByNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).GetChalaniByNumber(ctx, req.(*GetChalaniByNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_ListChalanis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChalanisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).ListChalanis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_ListChalanis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).ListChalanis(ctx, req.(*ListChalanisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_GetMyChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).GetMyChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_GetMyChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).GetMyChalani(ctx, req.(*GetMyChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_GetChalaniStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChalaniStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).GetChalaniStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_GetChalaniStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).GetChalaniStats(ctx, req.(*GetChalaniStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_ListChalaniTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChalaniTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).ListChalaniTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_ListChalaniTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).ListChalaniTemplates(ctx, req.(*ListChalaniTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_GetChalaniTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChalaniTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).GetChalaniTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_GetChalaniTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).GetChalaniTemplate(ctx, req.(*GetChalaniTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_CreateChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).CreateChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_CreateChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).CreateChalani(ctx, req.(*CreateChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_SubmitChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).SubmitChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_SubmitChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).SubmitChalani(ctx, req.(*SubmitChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_ReviewChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).ReviewChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_ReviewChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).ReviewChalani(ctx, req.(*ReviewChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_ApproveChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).ApproveChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_ApproveChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).ApproveChalani(ctx, req.(*ApproveChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_ReserveChalaniNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveChalaniNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).ReserveChalaniNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_ReserveChalaniNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).ReserveChalaniNumber(ctx, req.(*ReserveChalaniNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_FinalizeChalaniRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeChalaniRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).FinalizeChalaniRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_FinalizeChalaniRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).FinalizeChalaniRegistration(ctx, req.(*FinalizeChalaniRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_DirectRegisterChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectRegisterChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).DirectRegisterChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_DirectRegisterChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).DirectRegisterChalani(ctx, req.(*DirectRegisterChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_SignChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).SignChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_SignChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).SignChalani(ctx, req.(*SignChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_SealChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SealChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).SealChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_SealChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).SealChalani(ctx, req.(*SealChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_DispatchChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).DispatchChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_DispatchChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).DispatchChalani(ctx, req.(*DispatchChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_MarkChalaniInTransit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkChalaniInTransitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).MarkChalaniInTransit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_MarkChalaniInTransit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).MarkChalaniInTransit(ctx, req.(*MarkChalaniInTransitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_AcknowledgeChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).AcknowledgeChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_AcknowledgeChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).AcknowledgeChalani(ctx, req.(*AcknowledgeChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_MarkChalaniDelivered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkChalaniDeliveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).MarkChalaniDelivered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_MarkChalaniDelivered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).MarkChalaniDelivered(ctx, req.(*MarkChalaniDeliveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_MarkChalaniReturnedUndelivered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkChalaniReturnedUndeliveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).MarkChalaniReturnedUndelivered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_MarkChalaniReturnedUndelivered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).MarkChalaniReturnedUndelivered(ctx, req.(*MarkChalaniReturnedUndeliveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_ResendChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).ResendChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_ResendChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).ResendChalani(ctx, req.(*ResendChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_VoidChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).VoidChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_VoidChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).VoidChalani(ctx, req.(*VoidChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_SupersedeChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupersedeChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).SupersedeChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_SupersedeChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).SupersedeChalani(ctx, req.(*SupersedeChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_CloseChalani_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseChalaniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).CloseChalani(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_CloseChalani_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).CloseChalani(ctx, req.(*CloseChalaniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChalaniService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChalaniServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChalaniService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChalaniServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChalaniService_ServiceDesc is the grpc.ServiceDesc for ChalaniService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChalaniService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "darta.v1.ChalaniService",
	HandlerType: (*ChalaniServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChalani",
			Handler:    _ChalaniService_GetChalani_Handler,
		},
		{
			MethodName: "GetChalaniByNumber",
			Handler:    _ChalaniService_GetChalaniByNumber_Handler,
		},
		{
			MethodName: "ListChalanis",
			Handler:    _ChalaniService_ListChalanis_Handler,
		},
		{
			MethodName: "GetMyChalani",
			Handler:    _ChalaniService_GetMyChalani_Handler,
		},
		{
			MethodName: "GetChalaniStats",
			Handler:    _ChalaniService_GetChalaniStats_Handler,
		},
		{
			MethodName: "ListChalaniTemplates",
			Handler:    _ChalaniService_ListChalaniTemplates_Handler,
		},
		{
			MethodName: "GetChalaniTemplate",
			Handler:    _ChalaniService_GetChalaniTemplate_Handler,
		},
		{
			MethodName: "CreateChalani",
			Handler:    _ChalaniService_CreateChalani_Handler,
		},
		{
			MethodName: "SubmitChalani",
			Handler:    _ChalaniService_SubmitChalani_Handler,
		},
		{
			MethodName: "ReviewChalani",
			Handler:    _ChalaniService_ReviewChalani_Handler,
		},
		{
			MethodName: "ApproveChalani",
			Handler:    _ChalaniService_ApproveChalani_Handler,
		},
		{
			MethodName: "ReserveChalaniNumber",
			Handler:    _ChalaniService_ReserveChalaniNumber_Handler,
		},
		{
			MethodName: "FinalizeChalaniRegistration",
			Handler:    _ChalaniService_FinalizeChalaniRegistration_Handler,
		},
		{
			MethodName: "DirectRegisterChalani",
			Handler:    _ChalaniService_DirectRegisterChalani_Handler,
		},
		{
			MethodName: "SignChalani",
			Handler:    _ChalaniService_SignChalani_Handler,
		},
		{
			MethodName: "SealChalani",
			Handler:    _ChalaniService_SealChalani_Handler,
		},
		{
			MethodName: "DispatchChalani",
			Handler:    _ChalaniService_DispatchChalani_Handler,
		},
		{
			MethodName: "MarkChalaniInTransit",
			Handler:    _ChalaniService_MarkChalaniInTransit_Handler,
		},
		{
			MethodName: "AcknowledgeChalani",
			Handler:    _ChalaniService_AcknowledgeChalani_Handler,
		},
		{
			MethodName: "MarkChalaniDelivered",
			Handler:    _ChalaniService_MarkChalaniDelivered_Handler,
		},
		{
			MethodName: "MarkChalaniReturnedUndelivered",
			Handler:    _ChalaniService_MarkChalaniReturnedUndelivered_Handler,
		},
		{
			MethodName: "ResendChalani",
			Handler:    _ChalaniService_ResendChalani_Handler,
		},
		{
			MethodName: "VoidChalani",
			Handler:    _ChalaniService_VoidChalani_Handler,
		},
		{
			MethodName: "SupersedeChalani",
			Handler:    _ChalaniService_SupersedeChalani_Handler,
		},
		{
			MethodName: "CloseChalani",
			Handler:    _ChalaniService_CloseChalani_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ChalaniService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "darta/v1/chalani.proto",
}
