// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: darta/v1/darta.proto

package dartav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DartaService_RegisterDarta_FullMethodName     = "/darta.v1.DartaService/RegisterDarta"
	DartaService_GetDarta_FullMethodName          = "/darta.v1.DartaService/GetDarta"
	DartaService_ListDartas_FullMethodName        = "/darta.v1.DartaService/ListDartas"
	DartaService_UpdateDartaStatus_FullMethodName = "/darta.v1.DartaService/UpdateDartaStatus"
	DartaService_HealthCheck_FullMethodName       = "/darta.v1.DartaService/HealthCheck"
)

// DartaServiceClient is the client API for DartaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DartaService provides operations for darta (document registration) management
type DartaServiceClient interface {
	// RegisterDarta creates a new darta record
	RegisterDarta(ctx context.Context, in *RegisterDartaRequest, opts ...grpc.CallOption) (*RegisterDartaResponse, error)
	// GetDarta retrieves a single darta by ID
	GetDarta(ctx context.Context, in *GetDartaRequest, opts ...grpc.CallOption) (*GetDartaResponse, error)
	// ListDartas returns a paginated list of dartas
	ListDartas(ctx context.Context, in *ListDartasRequest, opts ...grpc.CallOption) (*ListDartasResponse, error)
	// UpdateDartaStatus updates the status of an existing darta
	UpdateDartaStatus(ctx context.Context, in *UpdateDartaStatusRequest, opts ...grpc.CallOption) (*UpdateDartaStatusResponse, error)
	// HealthCheck returns the health status of the service
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type dartaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDartaServiceClient(cc grpc.ClientConnInterface) DartaServiceClient {
	return &dartaServiceClient{cc}
}

func (c *dartaServiceClient) RegisterDarta(ctx context.Context, in *RegisterDartaRequest, opts ...grpc.CallOption) (*RegisterDartaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDartaResponse)
	err := c.cc.Invoke(ctx, DartaService_RegisterDarta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) GetDarta(ctx context.Context, in *GetDartaRequest, opts ...grpc.CallOption) (*GetDartaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDartaResponse)
	err := c.cc.Invoke(ctx, DartaService_GetDarta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) ListDartas(ctx context.Context, in *ListDartasRequest, opts ...grpc.CallOption) (*ListDartasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDartasResponse)
	err := c.cc.Invoke(ctx, DartaService_ListDartas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) UpdateDartaStatus(ctx context.Context, in *UpdateDartaStatusRequest, opts ...grpc.CallOption) (*UpdateDartaStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDartaStatusResponse)
	err := c.cc.Invoke(ctx, DartaService_UpdateDartaStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, DartaService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DartaServiceServer is the server API for DartaService service.
// All implementations must embed UnimplementedDartaServiceServer
// for forward compatibility.
//
// DartaService provides operations for darta (document registration) management
type DartaServiceServer interface {
	// RegisterDarta creates a new darta record
	RegisterDarta(context.Context, *RegisterDartaRequest) (*RegisterDartaResponse, error)
	// GetDarta retrieves a single darta by ID
	GetDarta(context.Context, *GetDartaRequest) (*GetDartaResponse, error)
	// ListDartas returns a paginated list of dartas
	ListDartas(context.Context, *ListDartasRequest) (*ListDartasResponse, error)
	// UpdateDartaStatus updates the status of an existing darta
	UpdateDartaStatus(context.Context, *UpdateDartaStatusRequest) (*UpdateDartaStatusResponse, error)
	// HealthCheck returns the health status of the service
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedDartaServiceServer()
}

// UnimplementedDartaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDartaServiceServer struct{}

func (UnimplementedDartaServiceServer) RegisterDarta(context.Context, *RegisterDartaRequest) (*RegisterDartaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDarta not implemented")
}
func (UnimplementedDartaServiceServer) GetDarta(context.Context, *GetDartaRequest) (*GetDartaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDarta not implemented")
}
func (UnimplementedDartaServiceServer) ListDartas(context.Context, *ListDartasRequest) (*ListDartasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDartas not implemented")
}
func (UnimplementedDartaServiceServer) UpdateDartaStatus(context.Context, *UpdateDartaStatusRequest) (*UpdateDartaStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDartaStatus not implemented")
}
func (UnimplementedDartaServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedDartaServiceServer) mustEmbedUnimplementedDartaServiceServer() {}
func (UnimplementedDartaServiceServer) testEmbeddedByValue()                      {}

// UnsafeDartaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DartaServiceServer will
// result in compilation errors.
type UnsafeDartaServiceServer interface {
	mustEmbedUnimplementedDartaServiceServer()
}

func RegisterDartaServiceServer(s grpc.ServiceRegistrar, srv DartaServiceServer) {
	// If the following call pancis, it indicates UnimplementedDartaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DartaService_ServiceDesc, srv)
}

func _DartaService_RegisterDarta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDartaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).RegisterDarta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_RegisterDarta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).RegisterDarta(ctx, req.(*RegisterDartaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_GetDarta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDartaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).GetDarta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_GetDarta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).GetDarta(ctx, req.(*GetDartaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_ListDartas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDartasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).ListDartas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_ListDartas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).ListDartas(ctx, req.(*ListDartasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_UpdateDartaStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDartaStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).UpdateDartaStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_UpdateDartaStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).UpdateDartaStatus(ctx, req.(*UpdateDartaStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DartaService_ServiceDesc is the grpc.ServiceDesc for DartaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DartaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "darta.v1.DartaService",
	HandlerType: (*DartaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDarta",
			Handler:    _DartaService_RegisterDarta_Handler,
		},
		{
			MethodName: "GetDarta",
			Handler:    _DartaService_GetDarta_Handler,
		},
		{
			MethodName: "ListDartas",
			Handler:    _DartaService_ListDartas_Handler,
		},
		{
			MethodName: "UpdateDartaStatus",
			Handler:    _DartaService_UpdateDartaStatus_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _DartaService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "darta/v1/darta.proto",
}
