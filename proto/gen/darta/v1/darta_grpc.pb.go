// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: darta/v1/darta.proto

package dartav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DartaService_GetDarta_FullMethodName                  = "/darta.v1.DartaService/GetDarta"
	DartaService_GetDartaByNumber_FullMethodName          = "/darta.v1.DartaService/GetDartaByNumber"
	DartaService_ListDartas_FullMethodName                = "/darta.v1.DartaService/ListDartas"
	DartaService_GetMyDartas_FullMethodName               = "/darta.v1.DartaService/GetMyDartas"
	DartaService_GetDartaStats_FullMethodName             = "/darta.v1.DartaService/GetDartaStats"
	DartaService_CreateDarta_FullMethodName               = "/darta.v1.DartaService/CreateDarta"
	DartaService_SubmitDartaForReview_FullMethodName      = "/darta.v1.DartaService/SubmitDartaForReview"
	DartaService_ReviewDarta_FullMethodName               = "/darta.v1.DartaService/ReviewDarta"
	DartaService_ClassifyDarta_FullMethodName             = "/darta.v1.DartaService/ClassifyDarta"
	DartaService_ReserveDartaNumber_FullMethodName        = "/darta.v1.DartaService/ReserveDartaNumber"
	DartaService_FinalizeDartaRegistration_FullMethodName = "/darta.v1.DartaService/FinalizeDartaRegistration"
	DartaService_DirectRegisterDarta_FullMethodName       = "/darta.v1.DartaService/DirectRegisterDarta"
	DartaService_VoidDarta_FullMethodName                 = "/darta.v1.DartaService/VoidDarta"
	DartaService_ScanDarta_FullMethodName                 = "/darta.v1.DartaService/ScanDarta"
	DartaService_EnrichDartaMetadata_FullMethodName       = "/darta.v1.DartaService/EnrichDartaMetadata"
	DartaService_FinalizeDartaArchive_FullMethodName      = "/darta.v1.DartaService/FinalizeDartaArchive"
	DartaService_RouteDarta_FullMethodName                = "/darta.v1.DartaService/RouteDarta"
	DartaService_SectionReviewDarta_FullMethodName        = "/darta.v1.DartaService/SectionReviewDarta"
	DartaService_RequestDartaClarification_FullMethodName = "/darta.v1.DartaService/RequestDartaClarification"
	DartaService_ProvideDartaClarification_FullMethodName = "/darta.v1.DartaService/ProvideDartaClarification"
	DartaService_AcceptDarta_FullMethodName               = "/darta.v1.DartaService/AcceptDarta"
	DartaService_MarkDartaAction_FullMethodName           = "/darta.v1.DartaService/MarkDartaAction"
	DartaService_IssueDartaResponse_FullMethodName        = "/darta.v1.DartaService/IssueDartaResponse"
	DartaService_RequestDartaAck_FullMethodName           = "/darta.v1.DartaService/RequestDartaAck"
	DartaService_ReceiveDartaAck_FullMethodName           = "/darta.v1.DartaService/ReceiveDartaAck"
	DartaService_SupersedeDartaRecord_FullMethodName      = "/darta.v1.DartaService/SupersedeDartaRecord"
	DartaService_CloseDarta_FullMethodName                = "/darta.v1.DartaService/CloseDarta"
	DartaService_HealthCheck_FullMethodName               = "/darta.v1.DartaService/HealthCheck"
)

// DartaServiceClient is the client API for DartaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DartaServiceClient interface {
	// Query operations
	GetDarta(ctx context.Context, in *GetDartaRequest, opts ...grpc.CallOption) (*GetDartaResponse, error)
	GetDartaByNumber(ctx context.Context, in *GetDartaByNumberRequest, opts ...grpc.CallOption) (*GetDartaByNumberResponse, error)
	ListDartas(ctx context.Context, in *ListDartasRequest, opts ...grpc.CallOption) (*ListDartasResponse, error)
	GetMyDartas(ctx context.Context, in *GetMyDartasRequest, opts ...grpc.CallOption) (*GetMyDartasResponse, error)
	GetDartaStats(ctx context.Context, in *GetDartaStatsRequest, opts ...grpc.CallOption) (*GetDartaStatsResponse, error)
	// Mutation operations - Registration workflow
	CreateDarta(ctx context.Context, in *CreateDartaRequest, opts ...grpc.CallOption) (*CreateDartaResponse, error)
	SubmitDartaForReview(ctx context.Context, in *SubmitDartaForReviewRequest, opts ...grpc.CallOption) (*SubmitDartaForReviewResponse, error)
	ReviewDarta(ctx context.Context, in *ReviewDartaRequest, opts ...grpc.CallOption) (*ReviewDartaResponse, error)
	ClassifyDarta(ctx context.Context, in *ClassifyDartaRequest, opts ...grpc.CallOption) (*ClassifyDartaResponse, error)
	ReserveDartaNumber(ctx context.Context, in *ReserveDartaNumberRequest, opts ...grpc.CallOption) (*ReserveDartaNumberResponse, error)
	FinalizeDartaRegistration(ctx context.Context, in *FinalizeDartaRegistrationRequest, opts ...grpc.CallOption) (*FinalizeDartaRegistrationResponse, error)
	DirectRegisterDarta(ctx context.Context, in *DirectRegisterDartaRequest, opts ...grpc.CallOption) (*DirectRegisterDartaResponse, error)
	VoidDarta(ctx context.Context, in *VoidDartaRequest, opts ...grpc.CallOption) (*VoidDartaResponse, error)
	// Mutation operations - Digitization workflow
	ScanDarta(ctx context.Context, in *ScanDartaRequest, opts ...grpc.CallOption) (*ScanDartaResponse, error)
	EnrichDartaMetadata(ctx context.Context, in *EnrichDartaMetadataRequest, opts ...grpc.CallOption) (*EnrichDartaMetadataResponse, error)
	FinalizeDartaArchive(ctx context.Context, in *FinalizeDartaArchiveRequest, opts ...grpc.CallOption) (*FinalizeDartaArchiveResponse, error)
	// Mutation operations - Assignment workflow
	RouteDarta(ctx context.Context, in *RouteDartaRequest, opts ...grpc.CallOption) (*RouteDartaResponse, error)
	SectionReviewDarta(ctx context.Context, in *SectionReviewDartaRequest, opts ...grpc.CallOption) (*SectionReviewDartaResponse, error)
	RequestDartaClarification(ctx context.Context, in *RequestDartaClarificationRequest, opts ...grpc.CallOption) (*RequestDartaClarificationResponse, error)
	ProvideDartaClarification(ctx context.Context, in *ProvideDartaClarificationRequest, opts ...grpc.CallOption) (*ProvideDartaClarificationResponse, error)
	AcceptDarta(ctx context.Context, in *AcceptDartaRequest, opts ...grpc.CallOption) (*AcceptDartaResponse, error)
	// Mutation operations - Action workflow
	MarkDartaAction(ctx context.Context, in *MarkDartaActionRequest, opts ...grpc.CallOption) (*MarkDartaActionResponse, error)
	IssueDartaResponse(ctx context.Context, in *IssueDartaResponseRequest, opts ...grpc.CallOption) (*IssueDartaResponseResponse, error)
	RequestDartaAck(ctx context.Context, in *RequestDartaAckRequest, opts ...grpc.CallOption) (*RequestDartaAckResponse, error)
	ReceiveDartaAck(ctx context.Context, in *ReceiveDartaAckRequest, opts ...grpc.CallOption) (*ReceiveDartaAckResponse, error)
	SupersedeDartaRecord(ctx context.Context, in *SupersedeDartaRecordRequest, opts ...grpc.CallOption) (*SupersedeDartaRecordResponse, error)
	CloseDarta(ctx context.Context, in *CloseDartaRequest, opts ...grpc.CallOption) (*CloseDartaResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type dartaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDartaServiceClient(cc grpc.ClientConnInterface) DartaServiceClient {
	return &dartaServiceClient{cc}
}

func (c *dartaServiceClient) GetDarta(ctx context.Context, in *GetDartaRequest, opts ...grpc.CallOption) (*GetDartaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDartaResponse)
	err := c.cc.Invoke(ctx, DartaService_GetDarta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) GetDartaByNumber(ctx context.Context, in *GetDartaByNumberRequest, opts ...grpc.CallOption) (*GetDartaByNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDartaByNumberResponse)
	err := c.cc.Invoke(ctx, DartaService_GetDartaByNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) ListDartas(ctx context.Context, in *ListDartasRequest, opts ...grpc.CallOption) (*ListDartasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDartasResponse)
	err := c.cc.Invoke(ctx, DartaService_ListDartas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) GetMyDartas(ctx context.Context, in *GetMyDartasRequest, opts ...grpc.CallOption) (*GetMyDartasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyDartasResponse)
	err := c.cc.Invoke(ctx, DartaService_GetMyDartas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) GetDartaStats(ctx context.Context, in *GetDartaStatsRequest, opts ...grpc.CallOption) (*GetDartaStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDartaStatsResponse)
	err := c.cc.Invoke(ctx, DartaService_GetDartaStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) CreateDarta(ctx context.Context, in *CreateDartaRequest, opts ...grpc.CallOption) (*CreateDartaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDartaResponse)
	err := c.cc.Invoke(ctx, DartaService_CreateDarta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) SubmitDartaForReview(ctx context.Context, in *SubmitDartaForReviewRequest, opts ...grpc.CallOption) (*SubmitDartaForReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitDartaForReviewResponse)
	err := c.cc.Invoke(ctx, DartaService_SubmitDartaForReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) ReviewDarta(ctx context.Context, in *ReviewDartaRequest, opts ...grpc.CallOption) (*ReviewDartaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewDartaResponse)
	err := c.cc.Invoke(ctx, DartaService_ReviewDarta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) ClassifyDarta(ctx context.Context, in *ClassifyDartaRequest, opts ...grpc.CallOption) (*ClassifyDartaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClassifyDartaResponse)
	err := c.cc.Invoke(ctx, DartaService_ClassifyDarta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) ReserveDartaNumber(ctx context.Context, in *ReserveDartaNumberRequest, opts ...grpc.CallOption) (*ReserveDartaNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveDartaNumberResponse)
	err := c.cc.Invoke(ctx, DartaService_ReserveDartaNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) FinalizeDartaRegistration(ctx context.Context, in *FinalizeDartaRegistrationRequest, opts ...grpc.CallOption) (*FinalizeDartaRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinalizeDartaRegistrationResponse)
	err := c.cc.Invoke(ctx, DartaService_FinalizeDartaRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) DirectRegisterDarta(ctx context.Context, in *DirectRegisterDartaRequest, opts ...grpc.CallOption) (*DirectRegisterDartaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DirectRegisterDartaResponse)
	err := c.cc.Invoke(ctx, DartaService_DirectRegisterDarta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) VoidDarta(ctx context.Context, in *VoidDartaRequest, opts ...grpc.CallOption) (*VoidDartaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoidDartaResponse)
	err := c.cc.Invoke(ctx, DartaService_VoidDarta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) ScanDarta(ctx context.Context, in *ScanDartaRequest, opts ...grpc.CallOption) (*ScanDartaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanDartaResponse)
	err := c.cc.Invoke(ctx, DartaService_ScanDarta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) EnrichDartaMetadata(ctx context.Context, in *EnrichDartaMetadataRequest, opts ...grpc.CallOption) (*EnrichDartaMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnrichDartaMetadataResponse)
	err := c.cc.Invoke(ctx, DartaService_EnrichDartaMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) FinalizeDartaArchive(ctx context.Context, in *FinalizeDartaArchiveRequest, opts ...grpc.CallOption) (*FinalizeDartaArchiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinalizeDartaArchiveResponse)
	err := c.cc.Invoke(ctx, DartaService_FinalizeDartaArchive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) RouteDarta(ctx context.Context, in *RouteDartaRequest, opts ...grpc.CallOption) (*RouteDartaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteDartaResponse)
	err := c.cc.Invoke(ctx, DartaService_RouteDarta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) SectionReviewDarta(ctx context.Context, in *SectionReviewDartaRequest, opts ...grpc.CallOption) (*SectionReviewDartaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SectionReviewDartaResponse)
	err := c.cc.Invoke(ctx, DartaService_SectionReviewDarta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) RequestDartaClarification(ctx context.Context, in *RequestDartaClarificationRequest, opts ...grpc.CallOption) (*RequestDartaClarificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestDartaClarificationResponse)
	err := c.cc.Invoke(ctx, DartaService_RequestDartaClarification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) ProvideDartaClarification(ctx context.Context, in *ProvideDartaClarificationRequest, opts ...grpc.CallOption) (*ProvideDartaClarificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvideDartaClarificationResponse)
	err := c.cc.Invoke(ctx, DartaService_ProvideDartaClarification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) AcceptDarta(ctx context.Context, in *AcceptDartaRequest, opts ...grpc.CallOption) (*AcceptDartaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptDartaResponse)
	err := c.cc.Invoke(ctx, DartaService_AcceptDarta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) MarkDartaAction(ctx context.Context, in *MarkDartaActionRequest, opts ...grpc.CallOption) (*MarkDartaActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkDartaActionResponse)
	err := c.cc.Invoke(ctx, DartaService_MarkDartaAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) IssueDartaResponse(ctx context.Context, in *IssueDartaResponseRequest, opts ...grpc.CallOption) (*IssueDartaResponseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IssueDartaResponseResponse)
	err := c.cc.Invoke(ctx, DartaService_IssueDartaResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) RequestDartaAck(ctx context.Context, in *RequestDartaAckRequest, opts ...grpc.CallOption) (*RequestDartaAckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestDartaAckResponse)
	err := c.cc.Invoke(ctx, DartaService_RequestDartaAck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) ReceiveDartaAck(ctx context.Context, in *ReceiveDartaAckRequest, opts ...grpc.CallOption) (*ReceiveDartaAckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveDartaAckResponse)
	err := c.cc.Invoke(ctx, DartaService_ReceiveDartaAck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) SupersedeDartaRecord(ctx context.Context, in *SupersedeDartaRecordRequest, opts ...grpc.CallOption) (*SupersedeDartaRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupersedeDartaRecordResponse)
	err := c.cc.Invoke(ctx, DartaService_SupersedeDartaRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) CloseDarta(ctx context.Context, in *CloseDartaRequest, opts ...grpc.CallOption) (*CloseDartaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseDartaResponse)
	err := c.cc.Invoke(ctx, DartaService_CloseDarta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dartaServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, DartaService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DartaServiceServer is the server API for DartaService service.
// All implementations must embed UnimplementedDartaServiceServer
// for forward compatibility.
type DartaServiceServer interface {
	// Query operations
	GetDarta(context.Context, *GetDartaRequest) (*GetDartaResponse, error)
	GetDartaByNumber(context.Context, *GetDartaByNumberRequest) (*GetDartaByNumberResponse, error)
	ListDartas(context.Context, *ListDartasRequest) (*ListDartasResponse, error)
	GetMyDartas(context.Context, *GetMyDartasRequest) (*GetMyDartasResponse, error)
	GetDartaStats(context.Context, *GetDartaStatsRequest) (*GetDartaStatsResponse, error)
	// Mutation operations - Registration workflow
	CreateDarta(context.Context, *CreateDartaRequest) (*CreateDartaResponse, error)
	SubmitDartaForReview(context.Context, *SubmitDartaForReviewRequest) (*SubmitDartaForReviewResponse, error)
	ReviewDarta(context.Context, *ReviewDartaRequest) (*ReviewDartaResponse, error)
	ClassifyDarta(context.Context, *ClassifyDartaRequest) (*ClassifyDartaResponse, error)
	ReserveDartaNumber(context.Context, *ReserveDartaNumberRequest) (*ReserveDartaNumberResponse, error)
	FinalizeDartaRegistration(context.Context, *FinalizeDartaRegistrationRequest) (*FinalizeDartaRegistrationResponse, error)
	DirectRegisterDarta(context.Context, *DirectRegisterDartaRequest) (*DirectRegisterDartaResponse, error)
	VoidDarta(context.Context, *VoidDartaRequest) (*VoidDartaResponse, error)
	// Mutation operations - Digitization workflow
	ScanDarta(context.Context, *ScanDartaRequest) (*ScanDartaResponse, error)
	EnrichDartaMetadata(context.Context, *EnrichDartaMetadataRequest) (*EnrichDartaMetadataResponse, error)
	FinalizeDartaArchive(context.Context, *FinalizeDartaArchiveRequest) (*FinalizeDartaArchiveResponse, error)
	// Mutation operations - Assignment workflow
	RouteDarta(context.Context, *RouteDartaRequest) (*RouteDartaResponse, error)
	SectionReviewDarta(context.Context, *SectionReviewDartaRequest) (*SectionReviewDartaResponse, error)
	RequestDartaClarification(context.Context, *RequestDartaClarificationRequest) (*RequestDartaClarificationResponse, error)
	ProvideDartaClarification(context.Context, *ProvideDartaClarificationRequest) (*ProvideDartaClarificationResponse, error)
	AcceptDarta(context.Context, *AcceptDartaRequest) (*AcceptDartaResponse, error)
	// Mutation operations - Action workflow
	MarkDartaAction(context.Context, *MarkDartaActionRequest) (*MarkDartaActionResponse, error)
	IssueDartaResponse(context.Context, *IssueDartaResponseRequest) (*IssueDartaResponseResponse, error)
	RequestDartaAck(context.Context, *RequestDartaAckRequest) (*RequestDartaAckResponse, error)
	ReceiveDartaAck(context.Context, *ReceiveDartaAckRequest) (*ReceiveDartaAckResponse, error)
	SupersedeDartaRecord(context.Context, *SupersedeDartaRecordRequest) (*SupersedeDartaRecordResponse, error)
	CloseDarta(context.Context, *CloseDartaRequest) (*CloseDartaResponse, error)
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedDartaServiceServer()
}

// UnimplementedDartaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDartaServiceServer struct{}

func (UnimplementedDartaServiceServer) GetDarta(context.Context, *GetDartaRequest) (*GetDartaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDarta not implemented")
}
func (UnimplementedDartaServiceServer) GetDartaByNumber(context.Context, *GetDartaByNumberRequest) (*GetDartaByNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDartaByNumber not implemented")
}
func (UnimplementedDartaServiceServer) ListDartas(context.Context, *ListDartasRequest) (*ListDartasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDartas not implemented")
}
func (UnimplementedDartaServiceServer) GetMyDartas(context.Context, *GetMyDartasRequest) (*GetMyDartasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyDartas not implemented")
}
func (UnimplementedDartaServiceServer) GetDartaStats(context.Context, *GetDartaStatsRequest) (*GetDartaStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDartaStats not implemented")
}
func (UnimplementedDartaServiceServer) CreateDarta(context.Context, *CreateDartaRequest) (*CreateDartaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDarta not implemented")
}
func (UnimplementedDartaServiceServer) SubmitDartaForReview(context.Context, *SubmitDartaForReviewRequest) (*SubmitDartaForReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitDartaForReview not implemented")
}
func (UnimplementedDartaServiceServer) ReviewDarta(context.Context, *ReviewDartaRequest) (*ReviewDartaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewDarta not implemented")
}
func (UnimplementedDartaServiceServer) ClassifyDarta(context.Context, *ClassifyDartaRequest) (*ClassifyDartaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyDarta not implemented")
}
func (UnimplementedDartaServiceServer) ReserveDartaNumber(context.Context, *ReserveDartaNumberRequest) (*ReserveDartaNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveDartaNumber not implemented")
}
func (UnimplementedDartaServiceServer) FinalizeDartaRegistration(context.Context, *FinalizeDartaRegistrationRequest) (*FinalizeDartaRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeDartaRegistration not implemented")
}
func (UnimplementedDartaServiceServer) DirectRegisterDarta(context.Context, *DirectRegisterDartaRequest) (*DirectRegisterDartaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectRegisterDarta not implemented")
}
func (UnimplementedDartaServiceServer) VoidDarta(context.Context, *VoidDartaRequest) (*VoidDartaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoidDarta not implemented")
}
func (UnimplementedDartaServiceServer) ScanDarta(context.Context, *ScanDartaRequest) (*ScanDartaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanDarta not implemented")
}
func (UnimplementedDartaServiceServer) EnrichDartaMetadata(context.Context, *EnrichDartaMetadataRequest) (*EnrichDartaMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrichDartaMetadata not implemented")
}
func (UnimplementedDartaServiceServer) FinalizeDartaArchive(context.Context, *FinalizeDartaArchiveRequest) (*FinalizeDartaArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeDartaArchive not implemented")
}
func (UnimplementedDartaServiceServer) RouteDarta(context.Context, *RouteDartaRequest) (*RouteDartaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteDarta not implemented")
}
func (UnimplementedDartaServiceServer) SectionReviewDarta(context.Context, *SectionReviewDartaRequest) (*SectionReviewDartaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SectionReviewDarta not implemented")
}
func (UnimplementedDartaServiceServer) RequestDartaClarification(context.Context, *RequestDartaClarificationRequest) (*RequestDartaClarificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDartaClarification not implemented")
}
func (UnimplementedDartaServiceServer) ProvideDartaClarification(context.Context, *ProvideDartaClarificationRequest) (*ProvideDartaClarificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvideDartaClarification not implemented")
}
func (UnimplementedDartaServiceServer) AcceptDarta(context.Context, *AcceptDartaRequest) (*AcceptDartaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptDarta not implemented")
}
func (UnimplementedDartaServiceServer) MarkDartaAction(context.Context, *MarkDartaActionRequest) (*MarkDartaActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkDartaAction not implemented")
}
func (UnimplementedDartaServiceServer) IssueDartaResponse(context.Context, *IssueDartaResponseRequest) (*IssueDartaResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueDartaResponse not implemented")
}
func (UnimplementedDartaServiceServer) RequestDartaAck(context.Context, *RequestDartaAckRequest) (*RequestDartaAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDartaAck not implemented")
}
func (UnimplementedDartaServiceServer) ReceiveDartaAck(context.Context, *ReceiveDartaAckRequest) (*ReceiveDartaAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveDartaAck not implemented")
}
func (UnimplementedDartaServiceServer) SupersedeDartaRecord(context.Context, *SupersedeDartaRecordRequest) (*SupersedeDartaRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupersedeDartaRecord not implemented")
}
func (UnimplementedDartaServiceServer) CloseDarta(context.Context, *CloseDartaRequest) (*CloseDartaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseDarta not implemented")
}
func (UnimplementedDartaServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedDartaServiceServer) mustEmbedUnimplementedDartaServiceServer() {}
func (UnimplementedDartaServiceServer) testEmbeddedByValue()                      {}

// UnsafeDartaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DartaServiceServer will
// result in compilation errors.
type UnsafeDartaServiceServer interface {
	mustEmbedUnimplementedDartaServiceServer()
}

func RegisterDartaServiceServer(s grpc.ServiceRegistrar, srv DartaServiceServer) {
	// If the following call pancis, it indicates UnimplementedDartaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DartaService_ServiceDesc, srv)
}

func _DartaService_GetDarta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDartaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).GetDarta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_GetDarta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).GetDarta(ctx, req.(*GetDartaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_GetDartaByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDartaByNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).GetDartaByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_GetDartaByNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).GetDartaByNumber(ctx, req.(*GetDartaByNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_ListDartas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDartasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).ListDartas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_ListDartas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).ListDartas(ctx, req.(*ListDartasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_GetMyDartas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyDartasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).GetMyDartas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_GetMyDartas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).GetMyDartas(ctx, req.(*GetMyDartasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_GetDartaStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDartaStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).GetDartaStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_GetDartaStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).GetDartaStats(ctx, req.(*GetDartaStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_CreateDarta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDartaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).CreateDarta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_CreateDarta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).CreateDarta(ctx, req.(*CreateDartaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_SubmitDartaForReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitDartaForReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).SubmitDartaForReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_SubmitDartaForReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).SubmitDartaForReview(ctx, req.(*SubmitDartaForReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_ReviewDarta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewDartaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).ReviewDarta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_ReviewDarta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).ReviewDarta(ctx, req.(*ReviewDartaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_ClassifyDarta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyDartaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).ClassifyDarta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_ClassifyDarta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).ClassifyDarta(ctx, req.(*ClassifyDartaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_ReserveDartaNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveDartaNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).ReserveDartaNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_ReserveDartaNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).ReserveDartaNumber(ctx, req.(*ReserveDartaNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_FinalizeDartaRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeDartaRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).FinalizeDartaRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_FinalizeDartaRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).FinalizeDartaRegistration(ctx, req.(*FinalizeDartaRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_DirectRegisterDarta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectRegisterDartaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).DirectRegisterDarta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_DirectRegisterDarta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).DirectRegisterDarta(ctx, req.(*DirectRegisterDartaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_VoidDarta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidDartaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).VoidDarta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_VoidDarta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).VoidDarta(ctx, req.(*VoidDartaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_ScanDarta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanDartaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).ScanDarta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_ScanDarta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).ScanDarta(ctx, req.(*ScanDartaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_EnrichDartaMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichDartaMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).EnrichDartaMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_EnrichDartaMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).EnrichDartaMetadata(ctx, req.(*EnrichDartaMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_FinalizeDartaArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeDartaArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).FinalizeDartaArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_FinalizeDartaArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).FinalizeDartaArchive(ctx, req.(*FinalizeDartaArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_RouteDarta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteDartaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).RouteDarta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_RouteDarta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).RouteDarta(ctx, req.(*RouteDartaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_SectionReviewDarta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectionReviewDartaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).SectionReviewDarta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_SectionReviewDarta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).SectionReviewDarta(ctx, req.(*SectionReviewDartaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_RequestDartaClarification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDartaClarificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).RequestDartaClarification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_RequestDartaClarification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).RequestDartaClarification(ctx, req.(*RequestDartaClarificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_ProvideDartaClarification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvideDartaClarificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).ProvideDartaClarification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_ProvideDartaClarification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).ProvideDartaClarification(ctx, req.(*ProvideDartaClarificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_AcceptDarta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptDartaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).AcceptDarta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_AcceptDarta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).AcceptDarta(ctx, req.(*AcceptDartaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_MarkDartaAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkDartaActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).MarkDartaAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_MarkDartaAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).MarkDartaAction(ctx, req.(*MarkDartaActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_IssueDartaResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueDartaResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).IssueDartaResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_IssueDartaResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).IssueDartaResponse(ctx, req.(*IssueDartaResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_RequestDartaAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDartaAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).RequestDartaAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_RequestDartaAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).RequestDartaAck(ctx, req.(*RequestDartaAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_ReceiveDartaAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveDartaAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).ReceiveDartaAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_ReceiveDartaAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).ReceiveDartaAck(ctx, req.(*ReceiveDartaAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_SupersedeDartaRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupersedeDartaRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).SupersedeDartaRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_SupersedeDartaRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).SupersedeDartaRecord(ctx, req.(*SupersedeDartaRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_CloseDarta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseDartaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).CloseDarta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_CloseDarta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).CloseDarta(ctx, req.(*CloseDartaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DartaService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DartaServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DartaService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DartaServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DartaService_ServiceDesc is the grpc.ServiceDesc for DartaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DartaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "darta.v1.DartaService",
	HandlerType: (*DartaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDarta",
			Handler:    _DartaService_GetDarta_Handler,
		},
		{
			MethodName: "GetDartaByNumber",
			Handler:    _DartaService_GetDartaByNumber_Handler,
		},
		{
			MethodName: "ListDartas",
			Handler:    _DartaService_ListDartas_Handler,
		},
		{
			MethodName: "GetMyDartas",
			Handler:    _DartaService_GetMyDartas_Handler,
		},
		{
			MethodName: "GetDartaStats",
			Handler:    _DartaService_GetDartaStats_Handler,
		},
		{
			MethodName: "CreateDarta",
			Handler:    _DartaService_CreateDarta_Handler,
		},
		{
			MethodName: "SubmitDartaForReview",
			Handler:    _DartaService_SubmitDartaForReview_Handler,
		},
		{
			MethodName: "ReviewDarta",
			Handler:    _DartaService_ReviewDarta_Handler,
		},
		{
			MethodName: "ClassifyDarta",
			Handler:    _DartaService_ClassifyDarta_Handler,
		},
		{
			MethodName: "ReserveDartaNumber",
			Handler:    _DartaService_ReserveDartaNumber_Handler,
		},
		{
			MethodName: "FinalizeDartaRegistration",
			Handler:    _DartaService_FinalizeDartaRegistration_Handler,
		},
		{
			MethodName: "DirectRegisterDarta",
			Handler:    _DartaService_DirectRegisterDarta_Handler,
		},
		{
			MethodName: "VoidDarta",
			Handler:    _DartaService_VoidDarta_Handler,
		},
		{
			MethodName: "ScanDarta",
			Handler:    _DartaService_ScanDarta_Handler,
		},
		{
			MethodName: "EnrichDartaMetadata",
			Handler:    _DartaService_EnrichDartaMetadata_Handler,
		},
		{
			MethodName: "FinalizeDartaArchive",
			Handler:    _DartaService_FinalizeDartaArchive_Handler,
		},
		{
			MethodName: "RouteDarta",
			Handler:    _DartaService_RouteDarta_Handler,
		},
		{
			MethodName: "SectionReviewDarta",
			Handler:    _DartaService_SectionReviewDarta_Handler,
		},
		{
			MethodName: "RequestDartaClarification",
			Handler:    _DartaService_RequestDartaClarification_Handler,
		},
		{
			MethodName: "ProvideDartaClarification",
			Handler:    _DartaService_ProvideDartaClarification_Handler,
		},
		{
			MethodName: "AcceptDarta",
			Handler:    _DartaService_AcceptDarta_Handler,
		},
		{
			MethodName: "MarkDartaAction",
			Handler:    _DartaService_MarkDartaAction_Handler,
		},
		{
			MethodName: "IssueDartaResponse",
			Handler:    _DartaService_IssueDartaResponse_Handler,
		},
		{
			MethodName: "RequestDartaAck",
			Handler:    _DartaService_RequestDartaAck_Handler,
		},
		{
			MethodName: "ReceiveDartaAck",
			Handler:    _DartaService_ReceiveDartaAck_Handler,
		},
		{
			MethodName: "SupersedeDartaRecord",
			Handler:    _DartaService_SupersedeDartaRecord_Handler,
		},
		{
			MethodName: "CloseDarta",
			Handler:    _DartaService_CloseDarta_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _DartaService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "darta/v1/darta.proto",
}
