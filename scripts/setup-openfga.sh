#!/bin/bash
set -e

# Configuration
OPENFGA_API_URL="${OPENFGA_API_URL:-http://localhost:8081}"
MODEL_FILE="${MODEL_FILE:-policies/openfga/model.json}"
ENV_FILE=".env"

echo "🚀 Setting up OpenFGA..."
echo "   API URL: ${OPENFGA_API_URL}"
echo "   Model File: ${MODEL_FILE}"
echo ""

# Validate model file exists
if [ ! -f "${MODEL_FILE}" ]; then
    echo "❌ Error: Model file not found at ${MODEL_FILE}"
    exit 1
fi

# Validate model file is valid JSON
if ! jq empty "${MODEL_FILE}" 2>/dev/null; then
    echo "❌ Error: Model file is not valid JSON"
    exit 1
fi

echo "✓ Model file validated"

# Wait for OpenFGA to be ready
echo "⏳ Waiting for OpenFGA to be ready..."
for i in {1..30}; do
    if curl -sf "${OPENFGA_API_URL}/healthz" > /dev/null 2>&1; then
        echo "✓ OpenFGA is ready"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "❌ Error: OpenFGA is not responding after 30 seconds"
        echo "   Make sure OpenFGA container is running: docker compose ps openfga"
        exit 1
    fi
    sleep 1
done

# Create store
echo ""
echo "📦 Creating OpenFGA store..."
STORE_RESPONSE=$(curl -sf -X POST "${OPENFGA_API_URL}/stores" \
  -H "Content-Type: application/json" \
  -d '{"name": "epalika"}')

if [ $? -ne 0 ]; then
    echo "❌ Error: Failed to create OpenFGA store"
    exit 1
fi

STORE_ID=$(echo $STORE_RESPONSE | jq -r '.id')

if [ -z "$STORE_ID" ] || [ "$STORE_ID" = "null" ]; then
    echo "❌ Error: Failed to extract store ID from response"
    echo "   Response: $STORE_RESPONSE"
    exit 1
fi

echo "✓ Store created with ID: ${STORE_ID}"

# Write authorization model
echo ""
echo "📝 Writing authorization model..."
MODEL_RESPONSE=$(curl -sf -X POST "${OPENFGA_API_URL}/stores/${STORE_ID}/authorization-models" \
  -H "Content-Type: application/json" \
  -d @${MODEL_FILE})

if [ $? -ne 0 ]; then
    echo "❌ Error: Failed to write authorization model"
    exit 1
fi

MODEL_ID=$(echo $MODEL_RESPONSE | jq -r '.authorization_model_id')

if [ -z "$MODEL_ID" ] || [ "$MODEL_ID" = "null" ]; then
    echo "❌ Error: Failed to extract model ID from response"
    echo "   Response: $MODEL_RESPONSE"
    exit 1
fi

echo "✓ Authorization model created with ID: ${MODEL_ID}"

# Write initial authorization tuples
echo ""
echo "🔐 Writing initial authorization tuples..."

curl -sf -X POST "${OPENFGA_API_URL}/stores/${STORE_ID}/write" \
  -H "Content-Type: application/json" \
  -d '{
    "writes": {
      "tuple_keys": [
        {
          "user": "user:admin",
          "relation": "admin",
          "object": "tenant:default"
        },
        {
          "user": "tenant:default",
          "relation": "tenant",
          "object": "graphql:query"
        },
        {
          "user": "tenant:default",
          "relation": "tenant",
          "object": "service:darta"
        },
        {
          "user": "tenant:default",
          "relation": "tenant",
          "object": "service:identity"
        }
      ]
    }
  }' > /dev/null 2>&1

if [ $? -ne 0 ]; then
    echo "❌ Warning: Failed to write initial tuples (this is non-fatal)"
else
    echo "✓ Initial tuples created"
fi

# Update .env file
echo ""
echo "📄 Updating .env file..."

# Create .env if it doesn't exist
if [ ! -f "${ENV_FILE}" ]; then
    echo "# OpenFGA Configuration" > "${ENV_FILE}"
    echo "# Generated by setup-openfga.sh on $(date)" >> "${ENV_FILE}"
    echo "" >> "${ENV_FILE}"
fi

# Remove old FGA entries if they exist
if grep -q "FGA_STORE_ID=" "${ENV_FILE}"; then
    sed -i '/FGA_STORE_ID=/d' "${ENV_FILE}"
fi
if grep -q "FGA_MODEL_ID=" "${ENV_FILE}"; then
    sed -i '/FGA_MODEL_ID=/d' "${ENV_FILE}"
fi
if grep -q "FGA_STORE=" "${ENV_FILE}"; then
    sed -i '/FGA_STORE=/d' "${ENV_FILE}"
fi

# Add new values
echo "FGA_STORE_ID=${STORE_ID}" >> "${ENV_FILE}"
echo "FGA_MODEL_ID=${MODEL_ID}" >> "${ENV_FILE}"

echo "✓ Environment variables written to ${ENV_FILE}"

# Print summary
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "✅ OpenFGA setup complete!"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "Store ID:  ${STORE_ID}"
echo "Model ID:  ${MODEL_ID}"
echo ""
echo "📌 Configuration saved to: ${ENV_FILE}"
echo ""
echo "🔄 To apply changes, restart your services:"
echo "   docker compose down"
echo "   docker compose up -d"
echo ""
echo "🧪 Test authorization:"
echo "   curl -X POST ${OPENFGA_API_URL}/stores/${STORE_ID}/check \\"
echo "     -H 'Content-Type: application/json' \\"
echo "     -d '{"
echo "       \"tuple_key\": {"
echo "         \"user\": \"user:admin\","
echo "         \"relation\": \"admin\","
echo "         \"object\": \"tenant:default\""
echo "       }"
echo "     }'"
echo ""
