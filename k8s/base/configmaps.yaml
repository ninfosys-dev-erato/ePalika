apiVersion: v1
kind: ConfigMap
metadata:
  name: epalika-config
  namespace: epalika
data:
  fga-check-url: "http://openfga:8080/stores/$(FGA_STORE)/check"
  keycloak-url: "http://keycloak:8080"
  keycloak-realm: "epalika"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oathkeeper-config
  namespace: epalika
data:
  oathkeeper.yaml: |
    log:
      level: info
    
    serve:
      proxy:
        port: 4455
      api:
        port: 4456
    
    access_rules:
      repositories:
        - file:///rules/rules.json
    
    errors:
      fallback:
        - json
      handlers:
        json:
          enabled: true
          config:
            verbose: false
        redirect:
          enabled: true
          config:
            to: https://www.ory.sh/docs
    
    mutators:
      header:
        enabled: true
        config:
          headers:
            X-User: "{{ print .Subject }}"
            X-User-ID: "{{ print .Extra.sub }}"
            X-Tenant: "{{ if .Extra.tenant }}{{ index .Extra.tenant 0 }}{{ end }}"
      noop:
        enabled: true
      id_token:
        enabled: true
        config:
          issuer_url: http://oathkeeper:4455/
          jwks_url: file:///jwks.json
    
    authorizers:
      allow:
        enabled: true
      deny:
        enabled: true
      remote_json:  
        enabled: true
        config:
          remote: http://pdp:8080/authorize   
          payload: "{}"
    
    authenticators:
      anonymous:
        enabled: true
        config:
          subject: guest
      jwt:
        enabled: true
        config:
          jwks_urls:
            - http://keycloak:8080/realms/epalika/protocol/openid-connect/certs
          scope_strategy: wildcard
          required_scope: []
          target_audience: []
          trusted_issuers:
            - http://keycloak:8080/realms/epalika
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oathkeeper-rules
  namespace: epalika
data:
  rules.json: |
    [
      {
        "id": "doc-read-auth",
        "version": "v0.40.7",
        "upstream": {
          "url": "http://darta-chalani:9000"
        },
        "match": {
          "url": "http://<.*>/documents/<.*>",
          "methods": ["GET"]
        },
        "authenticators": [
          { "handler": "jwt" }
        ],
        "authorizer": {
          "handler": "remote_json",
          "config": {
            "remote": "http://pdp:8080/authorize",
            "payload": "{\"subject\": \"user:{{ print .Extra.preferred_username }}\", \"resource\": \"doc:{{ if .Extra.tenant }}{{ index .Extra.tenant 0 }}{{ else }}default{{ end }}/{{ index .MatchContext.RegexpCaptureGroups 0 }}\", \"action\": \"can_read\", \"claims\": {\"tenant\": \"{{ if .Extra.tenant }}{{ index .Extra.tenant 0 }}{{ else }}default{{ end }}\"}, \"context\": {\"time\": \"{{ now.Format \"2006-01-02T15:04:05Z\" }}\"}}",
            "forward_response_headers_to_upstream": ["x-authz-decision"],
            "retry": { "give_up_after": "1s", "max_delay": "100ms" }
          }
        },
        "mutators": [
          {
            "handler": "header",
            "config": {
              "headers": {
                "X-User": "{{ print .Subject }}",
                "X-User-ID": "{{ print .Extra.sub }}",
                "X-Tenant": "{{ if .Extra.tenant }}{{ index .Extra.tenant 0 }}{{ end }}"
              }
            }
          }
        ]
      },
      {
        "id": "doc-write-auth",
        "version": "v0.40.7",
        "upstream": {
          "url": "http://darta-chalani:9000"
        },
        "match": {
          "url": "http://<.*>/documents/<.*>",
          "methods": ["POST", "PUT", "PATCH", "DELETE"]
        },
        "authenticators": [
          { "handler": "jwt" }
        ],
        "authorizer": {
          "handler": "remote_json",
          "config": {
            "remote": "http://pdp:8080/authorize",
            "payload": "{\"subject\": \"user:{{ print .Extra.preferred_username }}\", \"resource\": \"doc:{{ if .Extra.tenant }}{{ index .Extra.tenant 0 }}{{ else }}default{{ end }}/{{ index .MatchContext.RegexpCaptureGroups 0 }}\", \"action\": \"can_write\", \"claims\": {\"tenant\": \"{{ if .Extra.tenant }}{{ index .Extra.tenant 0 }}{{ else }}default{{ end }}\"}, \"context\": {\"time\": \"{{ now.Format \"2006-01-02T15:04:05Z\" }}\"}}",
            "forward_response_headers_to_upstream": ["x-authz-decision"],
            "retry": { "give_up_after": "1s", "max_delay": "100ms" }
          }
        },
        "mutators": [
          {
            "handler": "header",
            "config": {
              "headers": {
                "X-User": "{{ print .Subject }}",
                "X-User-ID": "{{ print .Extra.sub }}",
                "X-Tenant": "{{ if .Extra.tenant }}{{ index .Extra.tenant 0 }}{{ end }}"
              }
            }
          }
        ]
      },
      {
        "id": "health-check",
        "version": "v0.40.7",
        "upstream": {
          "url": "http://darta-chalani:9000"
        },
        "match": {
          "url": "http://<.*>/health",
          "methods": ["GET"]
        },
        "authenticators": [
          { "handler": "anonymous" }
        ],
        "authorizer": {
          "handler": "allow"
        },
        "mutators": [
          { "handler": "noop" }
        ]
      }
    ]