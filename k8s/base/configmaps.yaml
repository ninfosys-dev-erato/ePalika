apiVersion: v1
kind: ConfigMap
metadata:
  name: oathkeeper-config
  labels:
    app.kubernetes.io/component: oathkeeper
    app.kubernetes.io/name: epalika
  annotations:
    checksum/origin: policies
data:
  oathkeeper.yaml: |
    serve:
      proxy:
        host: 0.0.0.0
        port: 4455
      api:
        host: 0.0.0.0
        port: 4456

    access_rules:
      repositories:
        - file:///etc/oathkeeper/rules/rules.json

    authenticators:
      jwt:
        enabled: true
        config:
          jwks_urls:
            - http://keycloak:8080/realms/palika/protocol/openid-connect/certs
          scope_strategy: exact
          trusted_issuers:
            - http://keycloak:8080/realms/palika
      noop:
        enabled: true

    authorizers:
      remote_json:
        enabled: true
        config:
          remote: http://pdp:8080/authorize
          payload: |
            {
              "subject": "{{ print .Subject }}",
              "resource": "{{ .MatchContext.URL.Path }}",
              "action": "{{ .MatchContext.Method }}",
              "tenant": "{{ .Extra.tenant }}"
            }
          headers:
            Content-Type: application/json
      allow:
        enabled: true

    mutators:
      header:
        enabled: true
        config:
          headers:
            X-User-ID: "{{ print .Subject }}"
            X-Tenant: "{{ .Extra.tenant }}"
            X-Roles: "{{ .Extra.roles }}"
      noop:
        enabled: true

    errors:
      fallback:
        - json
      handlers:
        json:
          enabled: true
          config:
            verbose: true

    log:
      level: info
      format: json
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oathkeeper-rules
  labels:
    app.kubernetes.io/component: oathkeeper
  annotations:
    checksum/origin: policies
data:
  rules.json: |
    [
      {
        "id": "graphql-query",
        "version": "v0.40.9",
        "match": {
          "url": "http://<.*>/query",
          "methods": ["POST", "OPTIONS"]
        },
        "upstream": {
          "url": "http://graphql-gateway:8000/query",
          "preserve_host": true
        },
        "authenticators": [
          {
            "handler": "jwt",
            "config": {
              "claims_map": {
                "tenant": "tenant_id",
                "roles": "realm_access.roles",
                "user_name": "preferred_username"
              }
            }
          }
        ],
        "authorizer": {
          "handler": "remote_json",
          "config": {
            "remote": "http://pdp:8080/authorize",
            "payload": "{{- $perm := index .MatchContext.Headers \"X-Graphql-Permission\" -}}{\"subject\":\"user:{{ print .Subject }}\",\"resource\":\"graphql:{{ if $perm }}{{ index $perm 0 }}{{ else }}query{{ end }}\",\"action\":\"{{ .MatchContext.Method }}\",\"context\":{\"tenant\":\"{{ if .Extra.tenant }}{{ index .Extra.tenant 0 }}{{ else }}default{{ end }}\"}}",
            "forward_response_headers_to_upstream": ["x-authz-decision", "x-authz-reason"],
            "retry": {
              "give_up_after": "1s",
              "max_delay": "100ms"
            }
          }
        },
        "mutators": [
          {
            "handler": "header",
            "config": {
              "headers": {
                "X-User-ID": "{{ print .Subject }}",
                "X-User-Name": "{{ if .Extra.user_name }}{{ .Extra.user_name }}{{ end }}",
                "X-Tenant": "{{ if .Extra.tenant }}{{ index .Extra.tenant 0 }}{{ else }}default{{ end }}",
                "X-Roles": "{{- range $index, $role := .Extra.roles -}}{{- if $index }},{{ end -}}{{ $role }}{{- end -}}",
                "X-Forwarded-For": "{{ .MatchContext.RemoteAddr }}"
              }
            }
          }
        ]
      },
      {
        "id": "graphql-playground",
        "version": "v0.40.9",
        "match": {
          "url": "http://<.*>/",
          "methods": ["GET"]
        },
        "upstream": {
          "url": "http://graphql-gateway:8000/"
        },
        "authenticators": [
          { "handler": "noop" }
        ],
        "authorizer": {
          "handler": "allow"
        },
        "mutators": [
          { "handler": "noop" }
        ]
      },
      {
        "id": "graphql-health",
        "version": "v0.40.9",
        "match": {
          "url": "http://<.*>/health",
          "methods": ["GET"]
        },
        "upstream": {
          "url": "http://graphql-gateway:8000/health"
        },
        "authenticators": [
          { "handler": "noop" }
        ],
        "authorizer": {
          "handler": "allow"
        },
        "mutators": [
          { "handler": "noop" }
        ]
      }
    ]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pdp-config
  labels:
    app.kubernetes.io/component: pdp
data:
  FGA_STORE_ID: changeme
  FGA_MODEL_ID: changeme
  FGA_CHECK_URL: http://openfga:8080/stores/changeme/check
  PDP_SERVICE_NAME: pdp
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: graphql-gateway-config
  labels:
    app.kubernetes.io/component: graphql
data:
  PORT: "8000"
  DARTA_CHALANI_GRPC_ADDR: darta-chalani:9000
  IDENTITY_GRPC_ADDR: identity:9001
  PDP_GRPC_ADDR: pdp:9100
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: identity-config
  labels:
    app.kubernetes.io/component: identity
data:
  KEYCLOAK_URL: http://keycloak:8080
  KEYCLOAK_REALM: palika
  KEYCLOAK_CLIENT_ID: admin-cli
  PORT: "9001"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: darta-chalani-config
  labels:
    app.kubernetes.io/component: darta
data:
  GRPC_PORT: "9000"
  DATABASE_DSN: postgres://yugabyte:yugabyte@yugabyte-tserver:5433/epalika?sslmode=disable
  DARTA_DB_MAX_CONNS: "15"
  DARTA_DB_MIN_CONNS: "3"
  DARTA_DB_MIGRATE_TIMEOUT: 60s
  DARTA_DB_HEALTH_TIMEOUT: 3s
  DEFAULT_TENANT: default
