// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: darta.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countDartas = `-- name: CountDartas :one
SELECT COUNT(*) FROM dartas
`

func (q *Queries) CountDartas(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countDartas)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDarta = `-- name: CreateDarta :one
INSERT INTO dartas (
    id,
    title,
    description,
    submitted_by,
    status,
    remarks,
    tenant_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
) RETURNING id, title, description, submitted_by, status, remarks, created_at, updated_at, tenant_id
`

type CreateDartaParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	SubmittedBy string    `json:"submitted_by"`
	Status      string    `json:"status"`
	Remarks     *string   `json:"remarks"`
	TenantID    string    `json:"tenant_id"`
}

func (q *Queries) CreateDarta(ctx context.Context, arg CreateDartaParams) (Darta, error) {
	row := q.db.QueryRow(ctx, createDarta,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.SubmittedBy,
		arg.Status,
		arg.Remarks,
		arg.TenantID,
	)
	var i Darta
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.SubmittedBy,
		&i.Status,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TenantID,
	)
	return i, err
}

const getDarta = `-- name: GetDarta :one
SELECT id, title, description, submitted_by, status, remarks, created_at, updated_at, tenant_id FROM dartas WHERE id = $1
`

func (q *Queries) GetDarta(ctx context.Context, id uuid.UUID) (Darta, error) {
	row := q.db.QueryRow(ctx, getDarta, id)
	var i Darta
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.SubmittedBy,
		&i.Status,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TenantID,
	)
	return i, err
}

const listDartas = `-- name: ListDartas :many
SELECT id, title, description, submitted_by, status, remarks, created_at, updated_at, tenant_id
FROM dartas
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListDartasParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDartas(ctx context.Context, arg ListDartasParams) ([]Darta, error) {
	rows, err := q.db.Query(ctx, listDartas, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Darta
	for rows.Next() {
		var i Darta
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.SubmittedBy,
			&i.Status,
			&i.Remarks,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TenantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDartaStatus = `-- name: UpdateDartaStatus :one
UPDATE dartas
SET status = $2,
    remarks = COALESCE($3, remarks),
    updated_at = NOW()
WHERE id = $1
RETURNING id, title, description, submitted_by, status, remarks, created_at, updated_at, tenant_id
`

type UpdateDartaStatusParams struct {
	ID      uuid.UUID `json:"id"`
	Status  string    `json:"status"`
	Remarks *string   `json:"remarks"`
}

func (q *Queries) UpdateDartaStatus(ctx context.Context, arg UpdateDartaStatusParams) (Darta, error) {
	row := q.db.QueryRow(ctx, updateDartaStatus, arg.ID, arg.Status, arg.Remarks)
	var i Darta
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.SubmittedBy,
		&i.Status,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TenantID,
	)
	return i, err
}
