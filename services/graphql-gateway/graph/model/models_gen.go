// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Response interface {
	IsResponse()
	GetSuccess() bool
	GetMessage() string
}

type AuthCheckInput struct {
	User     string `json:"user"`
	Relation string `json:"relation"`
	Object   string `json:"object"`
}

type AuthCheckResponse struct {
	Success bool    `json:"success"`
	Message string  `json:"message"`
	Allowed bool    `json:"allowed"`
	Reason  *string `json:"reason,omitempty"`
}

func (AuthCheckResponse) IsResponse()             {}
func (this AuthCheckResponse) GetSuccess() bool   { return this.Success }
func (this AuthCheckResponse) GetMessage() string { return this.Message }

type Darta struct {
	ID          string      `json:"id"`
	Title       string      `json:"title"`
	Description string      `json:"description"`
	SubmittedBy string      `json:"submittedBy"`
	Status      DartaStatus `json:"status"`
	CreatedAt   string      `json:"createdAt"`
	UpdatedAt   *string     `json:"updatedAt,omitempty"`
}

type DartaList struct {
	Items  []*Darta `json:"items"`
	Total  int      `json:"total"`
	Limit  int      `json:"limit"`
	Offset int      `json:"offset"`
}

type HealthStatus struct {
	Status    string  `json:"status"`
	Service   string  `json:"service"`
	Timestamp *string `json:"timestamp,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type RegisterDartaInput struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	SubmittedBy string `json:"submittedBy"`
}

type RegisterDartaResponse struct {
	Success bool    `json:"success"`
	Message string  `json:"message"`
	Darta   *Darta  `json:"darta,omitempty"`
	DartaID *string `json:"dartaId,omitempty"`
}

func (RegisterDartaResponse) IsResponse()             {}
func (this RegisterDartaResponse) GetSuccess() bool   { return this.Success }
func (this RegisterDartaResponse) GetMessage() string { return this.Message }

type UpdateDartaResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	Darta   *Darta `json:"darta,omitempty"`
}

func (UpdateDartaResponse) IsResponse()             {}
func (this UpdateDartaResponse) GetSuccess() bool   { return this.Success }
func (this UpdateDartaResponse) GetMessage() string { return this.Message }

type UpdateDartaStatusInput struct {
	Status  DartaStatus `json:"status"`
	Remarks *string     `json:"remarks,omitempty"`
}

type DartaStatus string

const (
	DartaStatusPending    DartaStatus = "PENDING"
	DartaStatusInProgress DartaStatus = "IN_PROGRESS"
	DartaStatusApproved   DartaStatus = "APPROVED"
	DartaStatusRejected   DartaStatus = "REJECTED"
	DartaStatusCompleted  DartaStatus = "COMPLETED"
)

var AllDartaStatus = []DartaStatus{
	DartaStatusPending,
	DartaStatusInProgress,
	DartaStatusApproved,
	DartaStatusRejected,
	DartaStatusCompleted,
}

func (e DartaStatus) IsValid() bool {
	switch e {
	case DartaStatusPending, DartaStatusInProgress, DartaStatusApproved, DartaStatusRejected, DartaStatusCompleted:
		return true
	}
	return false
}

func (e DartaStatus) String() string {
	return string(e)
}

func (e *DartaStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DartaStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DartaStatus", str)
	}
	return nil
}

func (e DartaStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *DartaStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e DartaStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
